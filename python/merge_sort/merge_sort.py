# -*- coding: utf-8 -*-
"""
Created on Sat Oct 20 03:48:03 2018

@author: carve
"""

def merge(A,B):
    """
    <<<merge([1],[2])
    >>>[1,2]
    """
    C = [0]*(len(A)+len(B))
    i=j=n=0
    while i<len(A) and j<len(B):
        if A[i] <= B[j]:
            C[n] = A[i];i+=1;n+=1
        else:
            C[n] = B[j];j+=1;n+=1
#""" Если мы вылезли из цикла, значит мы вышли за пределы какого-то из массивов
# либо А либо В. А это значит, что все что нужно - к итоговому массиву просто
# присобачить остаток того из которого не выпали. Но чтоб не ломать голову из
# какого вылетели а из какого нет, я просто присобачу ОБА масиива, ведь один
# из них итак пустой, так что в итоге получится как-раз тоже самое, при этом 
# сэкономлю на проверках if. Погнали. 
# """
    C[n:n+len(A)-i] = A[i:len(A)] 
    C[n+len(A)-i:len(C)] = B[j:len(B)]
    return C

def merge2(A,b,m,e):
    C = [0]*(e-b)
    i,j,n = b,m,0
    while i<m and j<e:
        if A[i] <= A[j]:
            C[n] = A[i];i+=1;n+=1
        else:
            C[n] = A[j];j+=1;n+=1
#""" Если мы вылезли из цикла, значит мы вышли за пределы какого-то из массивов
# либо А либо В. А это значит, что все что нужно - к итоговому массиву просто
# присобачить остаток того из которого не выпали. Но чтоб не ломать голову из
# какого вылетели а из какого нет, я просто присобачу ОБА масиива, ведь один
# из них итак пустой, так что в итоге получится как-раз тоже самое, при этом 
# сэкономлю на проверках if. Погнали. 
# """
    C[n:n+(m-b)-i] = A[i:m] #!!! Было A[i:m-b] что неверно!!!
    C[n+(m-b)-i:len(C)] = A[j:e] #!!! Было A[j:e-m] что неверно!!!
    A[b:e] = C[:]
    return C

def merge_sort2(A,b,e):
    if e-b <= 1:
        return
    middle = ((e-b)//2)+b
    print("merge_sort(A,%d,%d)" % (b,e),"\n middle = %d" % (middle))
    merge_sort2(A,b,middle)
    merge_sort2(A,middle,e)
    merge2(A,b,middle,e)


def merge_sort(A:list):
    if len(A) <= 1:
        return
    middle = len(A)//2
    merge_sort(A[:middle])
    merge_sort(A[middle:len(A)])
    print(A[:middle],A[middle:len(A)])
    A[:] = merge(A[:middle],A[middle:len(A)])
    

def test_merge():
    print(merge2([1,2],0,1,2)) #[1,2]
    print(merge2([2,1],0,1,2)) #[1,2]
    print(merge2([1,1],0,1,2)) #[1,1]
    print(merge2([2],0,1,1)) #[2]
    print(merge2([1],0,1,1)) #[1]
    print(merge2([],0,0,0)) #[]
    print(merge2([1,2,3,4],0,3,4)) #[1,2,3,4]
    print(merge2([1,2,3,2],0,3,4)) #[1,2,2,3]
    print(merge2([1,2,3],0,3,3)) #[1,2,3]
    print(merge2([1,2,4,3],0,3,4)) #[1,2,3,4]
    print(merge2([1,2,3,0],0,3,4)) #[0,1,2,3]
    print(merge2([4,1,2,3],0,1,4)) #[1,2,3,4]
    print(merge2([2,1,2,3],0,1,4)) #[1,2,2,3]
    print(merge2([1,2,3],0,0,4)) #[1,2,3]
    print(merge2([3,1,2,4],0,1,4)) #[1,2,3,4]
    print(merge2([0,1,2,3],0,1,4)) #[0,1,2,3]
    print(merge2([1,2,3,4,5,6],0,3,6)) #[1,2,3,4,5,6]
    print(merge2([1,3,5,2,4,6],0,3,6)) #[1,2,3,4,5,6]
    print(merge2([1,2,5,2,3,4],0,3,6)) #[1,2,2,3,4,5]
    print(merge2([4,5,6,1,2,3],0,3,6)) #[1,2,3,4,5,6]
    print(merge2([2,4,6,1,3,5],0,3,6)) #[1,2,3,4,5,6]
    print(merge2([2,3,4,1,2,5],0,3,6)) #[1,2,2,3,4,5]
    
def alt_test_merge():
    mp = [[(1,2),[[1],[2]]],
          [(1,2),[[2],[1]]],
          [(1,1),[[1],[1]]],
          [(2,),[[],[2]]],
          [(1,),[[1],[]]],
          [(),[[],[]]],
          [(1,2,3,4),[[1,2,3],[4]]],
          [(1,2,2,3),[[1,2,3],[2]]],
          [(1,2,3),[[1,2,3],[]]],
          [(1,2,3,4),[[1,2,4],[3]]],
          [(0,1,2,3),[[1,2,3],[0]]],
          [(1,2,3,4),[[4],[1,2,3]]],
          [(1,2,2,3),[[2],[1,2,3]]],
          [(1,2,3),[[],[1,2,3]]],
          [(1,2,3,4),[[3],[1,2,4]]],
          [(0,1,2,3),[[0],[1,2,3]]],
          [(1,2,3,4,5,6),[[1,2,3],[4,5,6]]],
          [(1,2,3,4,5,6),[[1,3,5],[2,4,6]]],
          [(1,2,2,3,4,5),[[1,2,5],[2,3,4]]],
          [(1,2,3,4,5,6),[[4,5,6],[1,2,3]]],
          [(1,2,3,4,5,6),[[2,4,6],[1,3,5]]],
          [(1,2,2,3,4,5),[[2,3,4],[1,2,5]]]
          ]
    
    for i in mp:
        t = merge(*i[1])
        if not all( [i[0][j] == t[j] for j in range(len(t))] ):
            print("# test of merge() with ", *i[1], " failed", sep='')

#test_merge()
a = [3,2,1,0] 
merge_sort2(a,0,len(a))
print(a)


